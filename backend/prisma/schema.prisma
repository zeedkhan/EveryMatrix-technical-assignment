generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String   @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expiresAt         DateTime
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id                     String                   @id @default(cuid())
    name                   String
    email                  String                   @unique
    password               String
    emailVerified          DateTime?
    createdAt              DateTime                 @default(now())
    accounts               Account[]
    refreshTokens          RefreshToken[]
    resetToken             ResetToken[]
    emailVerificationToken EmailVerificationToken[]

    avatar    String?    @default("")
    messages  Message[]
    chatRooms ChatRoom[]
}

model RefreshToken {
    id        String   @id @default(cuid())
    token     String   @unique
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())
}

model ResetToken {
    id        String   @id @default(cuid())
    token     String   @unique
    expiresAt DateTime
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())
}

model EmailVerificationToken {
    id        String   @id @default(cuid())
    token     String   @unique
    expiresAt DateTime
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())
}

model ChatRoom {
    id        String    @id @default(cuid())
    name      String
    avatar    String?   @default("")
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    users     User[]
    messages  Message[]
}

enum MessageType {
    TEXT
    FILE
}

model Message {
    id         String      @id @default(cuid())
    text       String
    type       MessageType
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    user       User        @relation(fields: [userId], references: [id])
    userId     String
    chatRoom   ChatRoom    @relation(fields: [chatRoomId], references: [id])
    chatRoomId String

    // one message can send multiple files
    file File[]

    // isdeleted
    isDeleted Boolean @default(false)
}

model File {
    id        String   @id @default(cuid())
    name      String
    size      Int
    key       String
    url       String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    messageId String
    message   Message  @relation(fields: [messageId], references: [id])
}
